// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisionWebService.Database;

namespace VisionWebService.Migrations
{
    [DbContext(typeof(VisionServerContext))]
    [Migration("20180720212931_Repos")]
    partial class Repos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("VisionLib.Models.Album", b =>
                {
                    b.Property<int>("AlbumID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArtistID");

                    b.Property<string>("Label");

                    b.HasKey("AlbumID");

                    b.HasIndex("ArtistID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("VisionLib.Models.Artist", b =>
                {
                    b.Property<int>("ArtistID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ArtistID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("VisionLib.Models.Repository", b =>
                {
                    b.Property<int>("RepositoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("RepositoryID");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("VisionLib.Models.Setting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("SettingID");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("VisionLib.Models.Track", b =>
                {
                    b.Property<int>("TrackID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlbumID");

                    b.Property<int?>("ArtistID");

                    b.Property<string>("RelativePath");

                    b.Property<int?>("RepositoryID");

                    b.Property<string>("Title");

                    b.HasKey("TrackID");

                    b.HasIndex("AlbumID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("RepositoryID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("VisionLib.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VisionLib.Models.Album", b =>
                {
                    b.HasOne("VisionLib.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistID");
                });

            modelBuilder.Entity("VisionLib.Models.Track", b =>
                {
                    b.HasOne("VisionLib.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumID");

                    b.HasOne("VisionLib.Models.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistID");

                    b.HasOne("VisionLib.Models.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryID");
                });
#pragma warning restore 612, 618
        }
    }
}
